/*
 * Copyright (c) 2016 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

module base-endpoint {
    yang-version 1;

    namespace "urn:opendaylight:groupbasedpolicy:endpoints";
    prefix "base-endpoint";

    import gbp-common { prefix gbp-common; revision-date 2014-04-21; }
    import forwarding { prefix forwarding; revision-date 2016-04-27; }

    revision "2016-04-27" {
        description
                "Initial revision.";
    }

    grouping address-endpoint-key {
        uses forwarding:has-address-type;
        leaf address {
            type string;
            mandatory true;
        }
    }

    grouping endpoint-key {
        uses forwarding:context-key;
        uses address-endpoint-key;
    }

    grouping has-child-endpoints {
        list child-endpoint {
            key "context-type context-id address-type address";
            uses endpoint-key;
        }
    }

    grouping parent-child-endpoints {
        choice parent-endpoint-choice {
            case parent-containment-endpoint-case {
                list parent-containment-endpoint {
                    key "context-type context-id";
                    uses forwarding:context-key;
                }
            }
            case parent-endpoint-case {
                list parent-endpoint {
                    key "context-type context-id address-type address";
                    uses endpoint-key;
                }
            }
        }
        uses has-child-endpoints;
    }

    grouping common-endpoint-fields {
        leaf tenant {
            type gbp-common:tenant-id;
            mandatory true;
            description
                        "The tenant with which this endpoint is associated";
        }
        container network-containment {
            description
                        "The network domain associated with this endpoint's fowarding
                        context.";
            uses forwarding:network-domain-key;
        }
        leaf-list endpoint-group {
            type gbp-common:endpoint-group-id;
            description
                        "The groups associated with this endpoint";
            ordered-by user;
            min-elements 1;
        }
        leaf-list condition {
            type gbp-common:condition-name;
            description
                        "The conditions associated with this endpoint";
        }
        leaf timestamp {
            type int64;
            description
                        "The last timestamp associated with this endpoint record. This
                        will be used for aging data in the registry.";
        }
    }

    grouping has-endpoint-group-conditions {
        description
                "Base type for object with endpoint group to condition mappings.";

        leaf endpoint-group {
            description "The endpoint group conditions to assign";
            type gbp-common:endpoint-group-id;
        }
        list endpoint-group-condition {
            description
                        "The conditions associated with this endpoint group";
            key "condition";
            leaf condition {
                description "A condition name to associate.";
                type gbp-common:condition-name;
            }
        }
    }

    grouping has-regular-location {
        leaf node {
            mandatory true;
            type instance-identifier;
        }
        leaf node-connector {
            type instance-identifier;
        }
    }

    grouping has-external-location {
        leaf external-node-mount-point {
            mandatory true;
            type instance-identifier;
        }
        leaf external-node-location {
            type string; // TODO switch to external-reference
        }
        leaf external-node-connector {
            type string; // TODO switch to external-reference
        }
    }

    grouping has-location {
        container real-location {
            choice location-type {
                case regular-location {
                    uses has-regular-location;
                }
                case external-location {
                    uses has-external-location;
                }
            }
        }
        container relative-location {
            list location {
                key "node node-connector";
                uses has-regular-location;
            }
            list external-location {
                key "external-node-mount-point external-node-connector";
                uses has-external-location;
            }
        }
    }

    container endpoints {
        description
                "Repository for operational state data about endpoints needed
                for policy resolution.";
        config false;

        list address-endpoints-by-containment {
            key "context-type context-id";
            uses forwarding:context-key;

            list address-endpoint {
                key "address-type address";
                uses address-endpoint-key;

                uses parent-child-endpoints;
                uses common-endpoint-fields;
                min-elements 1;
            }
        }

        list containment-endpoint {
            key "context-type context-id";
            uses forwarding:context-key;

            uses has-child-endpoints;
            uses common-endpoint-fields;
        }
    }

    container endpoint-locations {
        list address-endpoint-location {
            key "context-type context-id address-type address";
            uses endpoint-key;
            uses has-location;
        }

        list containment-endpoint-location {
            key "context-type context-id";
            uses forwarding:context-key;
            uses has-location;
        }
    }

    rpc register-endpoint {
        description
                "Register a new endpoint into the registry. If there is already
                an existing endpoint with the same keys, they will be overwritten
                with the new information.";

        input {
            list address-endpoint-reg {
                key "context-type context-id address-type address";
                uses endpoint-key;

                uses parent-child-endpoints;
                uses common-endpoint-fields;
                uses has-location;
            }
            list containment-endpoint-reg {
                key "context-type context-id";
                uses forwarding:context-key;

                uses has-child-endpoints;
                uses common-endpoint-fields;
                uses has-location;
            }
        }
    }

    rpc unregister-endpoint {
        description "Unregister an endpoint or endpoints from the registry.";

        input {
            list address-endpoint-unreg {
                key "context-type context-id address-type address";
                uses endpoint-key;
            }
            list containment-endpoint-unreg {
                key "context-type context-id";
                uses forwarding:context-key;
            }
        }
    }

}
